import { useState } from "react";
import * as S from './Post.style';
import { MdOutlineDriveFolderUpload } from "react-icons/md";
import { GoTag } from "react-icons/go";
import { useNavigate } from "react-router-dom";
import { createPost } from "../../api/community"; 

const category = { data: ["ÏÉùÏùº", "Ïó∞Ïù∏", "ÏπúÍµ¨", "Î∂ÄÎ™®Îãò", "ÏÑ†ÏÉùÎãò", "X-mas", "Ï°∏ÏóÖ", "ÌöåÏÇ¨", "Í≤∞Ìòº", "ÏïÑÏù¥"] };

const Post = () => {
    const [preview, setPreview] = useState(null);
    const [selectedCategory, setSelectedCategory] = useState("Ïπ¥ÌÖåÍ≥†Î¶¨");
    const [showDropdown, setShowDropdown] = useState(false);
    const [title, setTitle] = useState("");
    const [content, setContent] = useState("");
    const [file, setFile] = useState(null);
    const navigate = useNavigate();


    const handleFileChange = (event) => {
        const selectedFile = event.target.files[0];
        if (selectedFile) {
            setFile(selectedFile);
            const reader = new FileReader();
            reader.onload = () => {
                setPreview(reader.result);
            };
            reader.readAsDataURL(selectedFile);
        }
    };

    const handleSubmit = async () => {
        if (!title || !content || selectedCategory === "Ïπ¥ÌÖåÍ≥†Î¶¨") {
            alert("Ï†úÎ™©, ÎÇ¥Ïö©, Ïπ¥ÌÖåÍ≥†Î¶¨Î•º ÏûÖÎ†•Ìï¥Ï£ºÏÑ∏Ïöî.");
            return;
        }
    
        const formData = new FormData();
        formData.append("title", title);
        formData.append("content", content);
        formData.append("category", selectedCategory);
        if (file) {
            formData.append("attachment", file);
        }
    
        try {
            console.log("üìù Í≤åÏãúÍ∏Ä ÏûëÏÑ± ÏöîÏ≤≠ Îç∞Ïù¥ÌÑ∞:", formData);
    
            const response = await createPost(formData); // API ÏöîÏ≤≠
            console.log("‚úÖ Í≤åÏãúÍ∏Ä ÏûëÏÑ± ÏÑ±Í≥µ:", response);
    
            alert("Í≤åÏãúÍ∏ÄÏù¥ ÏÑ±Í≥µÏ†ÅÏúºÎ°ú Îì±Î°ùÎêòÏóàÏäµÎãàÎã§.");
            navigate("/community/posts");
        } catch (error) {
            console.error("‚ùå Í≤åÏãúÍ∏Ä ÏûëÏÑ± Ï§ë Ïò§Î•ò Î∞úÏÉù:", error.response?.data || error.message);
            alert("Í≤åÏãúÍ∏Ä ÏûëÏÑ± Ïã§Ìå®: " + (error.response?.data?.message || "Ïò§Î•ò Î∞úÏÉù"));
        }
    };
    

    const handleCategorySelect = (category) => {
        setSelectedCategory(category); 
        setShowDropdown(false); 
    };

    const handleList = () => {
        navigate("/community/posts")
    }

    return (
        <S.PostContainer>
            <S.PostMenu>
                <S.TagSet>
                    <GoTag style={{color:"rgba(89, 62, 23, 0.70)", fontSize:"20px", paddingBottom:"5px"}}/>
                    <S.PostCategory onClick={() => setShowDropdown(!showDropdown)}>
                        {selectedCategory}
                    </S.PostCategory>
                </S.TagSet>
                {showDropdown && (
                    <S.DropdownMenu>
                        {category.data.map((cat, index) => (
                            <S.DropdownItem
                                key={index}
                                onClick={() => handleCategorySelect(cat)}
                            >
                                {cat}
                            </S.DropdownItem>
                        ))}
                    </S.DropdownMenu>
                )}
                <S.PostTitleSet>
                    <S.PostTitleInput 
                        type="text" 
                        name="title"
                        spellCheck="false"
                        placeholder="Í≤åÏãúÍ∏ÄÏùò Ï†úÎ™©ÏùÑ ÏûÖÎ†•ÌïòÏÑ∏Ïöî."
                        value={title}
                        onChange={(e) => setTitle(e.target.value)}
                    />
                    <S.PostButtonSet>
                        <S.PostListButton onClick={handleList}>Î™©Î°ù Î≥¥Í∏∞</S.PostListButton>
                        <S.CancelButton onClick={handleList}>ÏûëÏÑ± Ï∑®ÏÜå</S.CancelButton>
                        <S.PostButton type="button"
                            value="Í≤åÏãúÍ∏Ä ÏûëÏÑ±"
                            onClick={handleSubmit}
                        />
                    </S.PostButtonSet>
                </S.PostTitleSet>
            </S.PostMenu>
            <S.PostLine />
            {preview && (
                <S.PreviewContainer>
                    <S.PreviewImage src={preview} alt="Ï≤®Î∂ÄÎêú ÌååÏùº ÎØ∏Î¶¨Î≥¥Í∏∞" />
                </S.PreviewContainer>
            )}
            <S.PostTextInput
                as="textarea"  
                name="text"
                rows="15"
                placeholder="Î≥∏Î¨∏Ïóê ÌÉúÍ∑∏Î•º ÏÇ¨Ïö©Ìï¥ Î≥¥ÏÑ∏Ïöî!"
                spellCheck="false"
                value={content}
                onChange={(e) => setContent(e.target.value)}
            />
            <S.PostLine />
            <S.PicSet>
                <S.TitleSet>
                    <MdOutlineDriveFolderUpload style={{ color: "rgba(89, 62, 23, 0.70)", fontSize: "16px", alignSelf:"center" }} />
                    <S.PicTitle>Ï≤®Î∂ÄÌååÏùº</S.PicTitle>
                </S.TitleSet>
                <S.PostPic
                    type="file"
                    name="file"
                    onChange={handleFileChange}
                />
            </S.PicSet>
        </S.PostContainer>
    );
};

export default Post;
